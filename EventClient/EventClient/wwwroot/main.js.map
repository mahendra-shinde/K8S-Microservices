<<<<<<< HEAD
{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/add-event/add-event.component.css","webpack:///./src/app/components/add-event/add-event.component.html","webpack:///./src/app/components/add-event/add-event.component.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/not-found/not-found.component.css","webpack:///./src/app/components/not-found/not-found.component.html","webpack:///./src/app/components/not-found/not-found.component.ts","webpack:///./src/app/components/register/register.component.css","webpack:///./src/app/components/register/register.component.html","webpack:///./src/app/components/register/register.component.ts","webpack:///./src/app/interceptors/auth-intercepter.ts","webpack:///./src/app/services/auth.service.ts","webpack:///./src/app/services/configuration.service.ts","webpack:///./src/app/services/event.service.ts","webpack:///./src/app/services/storage.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './components/home/home.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { NotFoundComponent } from './components/not-found/not-found.component';\nimport { AddEventComponent } from './components/add-event/add-event.component';\n\nconst routes: Routes = [\n    { path:\"\", component:HomeComponent},\n    { path:\"events/new\", component:AddEventComponent},\n    { path:\"login\" , component:LoginComponent},    \n    { path:\"register\", component:RegisterComponent},\n    { path:\"**\", component:NotFoundComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<nav class=\\\"navbar navbar-default\\\">\\n    <div class=\\\"container-fluid\\\">\\n        <!-- Brand and toggle get grouped for better mobile display -->\\n        <div class=\\\"navbar-header\\\">\\n            <button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\"\\n                data-target=\\\"#bs-example-navbar-collapse-1\\\" aria-expanded=\\\"false\\\">\\n                <span class=\\\"sr-only\\\">Toggle navigation</span>\\n                <span class=\\\"icon-bar\\\"></span>\\n                <span class=\\\"icon-bar\\\"></span>\\n                <span class=\\\"icon-bar\\\"></span>\\n            </button>\\n            <a class=\\\"navbar-brand\\\" href=\\\"#\\\">Event Manager</a>\\n        </div>\\n\\n        <!-- Collect the nav links, forms, and other content for toggling -->\\n        <div class=\\\"collapse navbar-collapse\\\" id=\\\"bs-example-navbar-collapse-1\\\">\\n            <ul class=\\\"nav navbar-nav\\\">                \\n                <li><a [routerLink]=\\\"['/']\\\">Events</a></li>   \\n                <li *ngIf=\\\"loggedIn\\\"><a [routerLink]=\\\"['/events/new']\\\">Add Event</a></li>\\n                <li *ngIf=\\\"!loggedIn\\\"><a [routerLink]=\\\"['/login']\\\">Login</a></li>             \\n                <li *ngIf=\\\"!loggedIn\\\"><a [routerLink]=\\\"['/register']\\\">Register</a></li>\\n            </ul>\\n\\n            <ul class=\\\"nav navbar-nav navbar-right\\\">\\n                <li *ngIf=\\\"!loggedIn\\\"><a href=\\\"#\\\">Welcome Guest</a></li>                \\n                <li *ngIf=\\\"loggedIn\\\"><a href=\\\"#\\\">Welcome User</a></li>  \\n                <li *ngIf=\\\"loggedIn\\\"><a href=\\\"#\\\" (click)=\\\"logout()\\\">Logout</a></li>              \\n            </ul>\\n        </div><!-- /.navbar-collapse -->\\n    </div><!-- /.container-fluid -->\\n</nav>\\n\\n<div class=\\\"container-fluid\\\">\\n    <router-outlet></router-outlet>\\n</div>\"","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n    private loggedIn: boolean;\n\n    constructor(private authSvc: AuthService, private router:Router) {\n        this.authSvc.isLoggedIn()\n            .subscribe(res => \n                {                    \n                    this.loggedIn = res;\n                });\n\n    }\n\n    logout(){\n        this.authSvc.logOut();\n        return this.router.navigate(['/'])\n    }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, APP_INITIALIZER } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LoginComponent } from './components/login/login.component';\nimport { AuthIntercepter } from './interceptors/auth-intercepter';\nimport { ConfigurationService } from './services/configuration.service';\nimport { RegisterComponent } from './components/register/register.component';\nimport { NotFoundComponent } from './components/not-found/not-found.component';\nimport { AddEventComponent } from './components/add-event/add-event.component';\n\n\nexport function initializeAppConfig(configService: ConfigurationService) {\n    return ():Promise<any> => { \n        return configService.loadSettings();\n    }\n}\n\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        HomeComponent,\n        LoginComponent,\n        RegisterComponent,\n        NotFoundComponent,\n        AddEventComponent\n    ],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        HttpClientModule,\n        ReactiveFormsModule\n    ],\n    providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: AuthIntercepter, multi: true },\n        { provide: APP_INITIALIZER, useFactory: initializeAppConfig, deps: [ConfigurationService], multi: true }\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWRkLWV2ZW50L2FkZC1ldmVudC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"row\\\">\\n        <div class=\\\"col-md-6 col-md-offset-3\\\">\\n            <div class=\\\"alert alert-success\\\" *ngIf=\\\"status && status.success\\\">\\n                {{status.message}}\\n            </div>\\n            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"status && status.success===false\\\">\\n                {{status.message}}\\n            </div>\\n            <h3>New event</h3>\\n            <form class=\\\"form\\\" [formGroup]=\\\"form\\\" (submit)=\\\"submit()\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"title\\\" />\\n                    <div *ngIf=\\\"controls.title.invalid && (controls.title.dirty || controls.title.touched)\\\" class=\\\"text-danger\\\">\\n                        <div *ngIf=\\\"controls.title.errors.required\\\">Event title is required. </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"location\\\">Event location</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"location\\\" />\\n                    <div *ngIf=\\\"controls.location.invalid && (controls.location.dirty || controls.location.touched)\\\" class=\\\"text-danger\\\">\\n                        <div *ngIf=\\\"controls.location.errors.required\\\">Location of event is required. </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"startDate\\\">Start date</label>\\n                    <input type=\\\"date\\\" class=\\\"form-control\\\" formControlName=\\\"startDate\\\" />\\n                    <div *ngIf=\\\"controls.startDate.invalid && (controls.startDate.dirty || controls.startDate.touched)\\\" class=\\\"text-danger\\\">\\n                        <div *ngIf=\\\"controls.startDate.errors.required\\\">Event start date required. </div>                        \\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"endDate\\\">End date</label>\\n                    <input type=\\\"date\\\" class=\\\"form-control\\\" formControlName=\\\"endDate\\\" />\\n                    <div *ngIf=\\\"controls.endDate.invalid && (controls.endDate.dirty || controls.endDate.touched)\\\" class=\\\"text-danger\\\">\\n                        <div *ngIf=\\\"controls.endDate.errors.required\\\">Event end date is required. </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"contactNo\\\">Speaker's name</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"speaker\\\" />\\n                    <div *ngIf=\\\"controls.speaker.invalid && (controls.speaker.dirty || controls.speaker.touched)\\\" class=\\\"text-danger\\\">\\n                        <div *ngIf=\\\"controls.speaker.errors.required\\\">Speaker's name is required. </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                        <label class=\\\"control-label\\\" for=\\\"contactNo\\\">Event registration Url</label>\\n                        <input type=\\\"url\\\" class=\\\"form-control\\\" formControlName=\\\"url\\\" />  \\n                        <div *ngIf=\\\"controls.url.invalid && (controls.url.dirty || controls.url.touched)\\\" class=\\\"text-danger\\\">\\n                                <div *ngIf=\\\"controls.url.errors.required\\\">Event registration url is required. </div>\\n                            </div>                      \\n                    </div>\\n                <div class=\\\"form-group\\\">\\n                    <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn btn-success\\\">Save</button>\\n                </div>\\n            </form>\\n        </div>\\n    </div>\"","import { Component, OnInit } from '@angular/core';\nimport { EventService } from 'src/app/services/event.service';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'add-event',\n    templateUrl: './add-event.component.html',\n    styleUrls: ['./add-event.component.css']\n})\nexport class AddEventComponent implements OnInit {\n\n    private form: FormGroup;\n    private status;any;\n\n    constructor(private fb: FormBuilder,\n        private eventSvc: EventService) { }\n\n    ngOnInit() {\n        this.form = this.fb.group({\n            \"title\": [\"\", Validators.required,],\n            \"location\": [\"\", Validators.required],\n            \"startDate\": [\"\", Validators.required],\n            \"endDate\": [\"\", Validators.required],\n            \"speaker\": [\"\", Validators.required],\n            \"url\": [\"\",Validators.required]\n        })\n    }\n\n    get controls(){ return this.form.controls; }\n    \n    submit() {        \n        if (this.form.valid) {\n            this.eventSvc.addEvent(this.form.value)\n                .subscribe(\n                    result => {\n                        this.status={ success:true, message:\"New event is added successfully.\"}\n                    },\n                    err => {                         \n                        this.status = {\n                            success: false,\n                            message:\"Failed to add new event data.\"\n                        }\n                     }\n                )\n        } else {\n            this.status = {\n                success: false,\n                message:\"Invalid form data\"\n            }\n        }\n    }\n\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS9ob21lLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"\\n<div class=\\\"row\\\">\\n    <div class=\\\"col-md-12\\\">\\n        <table class=\\\"table table-striped table-bordered\\\">\\n            <tr>\\n                <th>Title</th>\\n                <th>Start Date</th>\\n                <th>End Date</th>\\n                <th>Speaker</th>\\n                <th>Location</th>\\n            </tr>\\n            <tr *ngFor=\\\"let ev of events|async\\\">\\n                <td>{{ev.title}}</td>\\n                <td>{{ev.startDate}}</td>\\n                <td>{{ev.endDate}}</td>\\n                <td>{{ev.speaker}}</td>\\n                <td>{{ev.location}}</td>\\n            </tr>\\n        </table>\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { EventService } from 'src/app/services/event.service';\nimport { Observable } from 'rxjs';\nimport { EventData } from 'src/app/models/event-data';\n\n@Component({\n    selector: 'home',\n    templateUrl: './home.component.html',\n    styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n    private events:Observable<EventData[]>;\n\n    constructor(private eventSvc: EventService) { }\n\n    ngOnInit() {\n        this.events=this.eventSvc.getEvents();\n    }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-md-6 col-md-offset-3\\\">\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"status && status.success===false\\\">\\n            {{status.message}}\\n        </div>\\n        <h3>Login</h3>\\n        <form  [formGroup]=\\\"form\\\" (submit)=\\\"submit()\\\">            \\n            <div class=\\\"form-group\\\">                \\n                <label class=\\\"control-label\\\" for=\\\"email\\\">Email</label>\\n                <input type=\\\"email\\\" name=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" />\\n                <div *ngIf=\\\"controls.email.invalid && (controls.email.dirty || controls.email.touched)\\\" class=\\\"text-danger\\\">\\n                    <div *ngIf=\\\"controls.email.errors.required\\\">Email is required. </div>\\n                    <div *ngIf=\\\"controls.email.errors.email\\\">Invalid email value </div>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\" for=\\\"email\\\">Password</label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" />\\n                <div *ngIf=\\\"controls.password.invalid && (controls.password.dirty || controls.password.touched)\\\" class=\\\"text-danger\\\">\\n                    <div *ngIf=\\\"controls.password.errors.required\\\">Password is required. </div>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn btn-success\\\">Login</button>\\n            </div>\\n        </form>\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { StorageService } from 'src/app/services/storage.service';\n\n@Component({\n    selector: 'login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n    private form: FormGroup;\n    private status:any;\n\n    constructor(private fb: FormBuilder,\n        private authSvc: AuthService,\n        private storageSvc:StorageService,\n        private router: Router) { }\n\n    ngOnInit() {\n        this.form = this.fb.group({\n            \"email\": [\"\", Validators.compose([Validators.required, Validators.email])],\n            \"password\":[\"\", Validators.required]\n        });        \n    }\n    get controls() {return this.form.controls}\n\n    submit() {        \n        if (this.form.valid) {\n            this.authSvc.getToken(this.form.value)\n                .subscribe(\n                    result => {                        \n                        this.storageSvc.setItem(\"auth-token\", result);\n                        this.router.navigate([\"/\"]);\n                    },\n                    err => {                         \n                        this.status = {\n                            success: false,\n                            message:\"Login failed, invalid username/password\"\n                        }\n                     }\n                )\n        } else {\n            this.status = {\n                success: false,\n                message:\"Invalid form data\"\n            }\n        }\n    }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbm90LWZvdW5kL25vdC1mb3VuZC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<h2>Not found</h2>\\n<p>\\n    The page you have reqeusted not found.\\n    <a [routerLink]=\\\"['/']\\\">Click here</a> to go to login.\\n</p>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-md-6 col-md-offset-3\\\">\\n        <div class=\\\"alert alert-success\\\" *ngIf=\\\"status && status.success\\\">\\n            {{status.message}}\\n        </div>\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"status && status.success===false\\\">\\n            {{status.message}}\\n        </div>\\n        <h3>Register</h3>\\n        <form class=\\\"form\\\" [formGroup]=\\\"form\\\" (submit)=\\\"submit()\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\" for=\\\"firstName\\\">First name</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"firstName\\\" />\\n                <div *ngIf=\\\"controls.firstName.invalid && (controls.firstName.dirty || controls.firstName.touched)\\\" class=\\\"text-danger\\\">\\n                    <div *ngIf=\\\"controls.firstName.errors.required\\\">First name is required. </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\" for=\\\"lastName\\\">Last name</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"lastName\\\" />\\n                <div *ngIf=\\\"controls.lastName.invalid && (controls.lastName.dirty || controls.lastName.touched)\\\" class=\\\"text-danger\\\">\\n                    <div *ngIf=\\\"controls.lastName.errors.required\\\">Last name is required. </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\" for=\\\"email\\\">Email</label>\\n                <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" />\\n                <div *ngIf=\\\"controls.email.invalid && (controls.email.dirty || controls.email.touched)\\\" class=\\\"text-danger\\\">\\n                    <div *ngIf=\\\"controls.email.errors.required\\\">Email is required. </div>\\n                    <div *ngIf=\\\"controls.email.errors.email\\\">Invalid email value </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\" for=\\\"email\\\">Password</label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" />\\n                <div *ngIf=\\\"controls.password.invalid && (controls.password.dirty || controls.password.touched)\\\" class=\\\"text-danger\\\">\\n                    <div *ngIf=\\\"controls.password.errors.required\\\">Password is required. </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\" for=\\\"contactNo\\\">Contact No</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"contactNo\\\" />\\n                <div *ngIf=\\\"controls.contactNo.invalid && (controls.contactNo.dirty || controls.contactNo.touched)\\\" class=\\\"text-danger\\\">\\n                    <div *ngIf=\\\"controls.contactNo.errors.required\\\">Contact number is required. </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn btn-success\\\">Register</button>\\n            </div>\\n        </form>\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n    selector: 'register',\n    templateUrl: './register.component.html',\n    styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n    private form: FormGroup;\n    private status: any;\n\n    constructor(private fb: FormBuilder,\n        private authSvc: AuthService) { }\n\n    ngOnInit() {\n        this.form = this.fb.group({\n            \"firstName\": [\"\", Validators.required,],\n            \"lastName\": [\"\", Validators.required],\n            \"email\": [\"\", Validators.compose([Validators.required, Validators.email])],\n            \"password\": [\"\", Validators.required],\n            \"contactNo\": [\"\", Validators.required]\n        })\n    }\n\n    get controls() {return this.form.controls}\n    \n    submit() {\n        if (this.form.valid) {\n            this.authSvc.register(this.form.value)\n                .subscribe(\n                    result => {\n                        this.status = { success: true, message: \"You have registered successfully\" };\n                    },\n                    err => {\n                    this.status = {\n                        success: false,\n                        message:\"Registration process failed, some error occured\"\n                    }\n                    }\n                )\n        } else {\n            this.status={ success:false, message:\"Invalid user details.\"};\n        }\n    }\n\n}\n","import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class AuthIntercepter implements HttpInterceptor {\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n        let newReq= req.clone({\n            setHeaders:{\n                \"Content-Type\":\"application/json\",\n                \"Accept\":\"application/json\"\n            }\n        });\n\n        let token = localStorage.getItem(\"auth-token\") || undefined;\n        console.log(\"Auth Token:\" + token);\n        if (token) {\n            var request = newReq.clone({\n                setHeaders:{\"Authorization\":`Bearer ${token}`},\n                //headers: req.headers.set(\"Authorization\", `Bearer ${token}`)\n            });\n            return next.handle(request);\n        }\n        return next.handle(newReq)\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of, Subject, BehaviorSubject } from 'rxjs';\nimport { ConfigurationService } from './configuration.service';\nimport { StorageService } from './storage.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n\n    private APIURL: string;\n    private loggedIn: boolean = false;\n    private subject: BehaviorSubject<boolean>;\n\n    constructor(private configSvc: ConfigurationService,\n        private http: HttpClient,\n        private storageSvc: StorageService) {\n\n        this.APIURL = this.configSvc.configuration.identityApiUrl;\n        this.subject = new BehaviorSubject<boolean>(this.loggedIn);        \n\n        if (this.storageSvc.getItem('auth-token')){\n            this.loggedIn = true;\n            this.subject.next(this.loggedIn);\n        }\n\n        this.storageSvc.watchStorage()\n            .subscribe(data => {\n                if (data === 'removed')\n                    this.loggedIn = false;\n                else if (data === 'added')\n                    this.loggedIn = true;\n                this.subject.next(this.loggedIn);\n            });\n\n\n    }\n\n    public getToken(login: any): Observable<string> {\n        return this.http.post<string>(`${this.APIURL}/api/identity/token`, login, {\n            headers: {\n                \"Content-type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        });\n    }\n\n    public register(user: any): Observable<any> {\n        return this.http.post<any>(`${this.APIURL}/api/identity/register`, user, {\n            headers: {\n                \"Content-type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        });\n    }\n\n    public isLoggedIn(): Observable<boolean> {\n        return this.subject;\n        //return of (this.loggedIn);        \n    }\n\n    public logOut() {\n        this.storageSvc.removeItem(\"auth-token\");\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { IConfiguration } from '../models/configuration';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ConfigurationService {\n    configuration: IConfiguration;\n\n    constructor(private http: HttpClient) { }\n\n    loadSettings(): Promise<any> {\n        const baseURI = document.baseURI.endsWith('/') ? document.baseURI : `${document.baseURI}/`;\n        let url = `${baseURI}api/settings`;\n        return this.http.get<IConfiguration>(url)\n            .toPromise()\n            .then(resp => {\n                this.configuration = resp;\n                console.log(resp)\n            });\n    }\n\n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, empty } from 'rxjs';\nimport { EventData } from '../models/event-data';\nimport { ConfigurationService } from './configuration.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class EventService {\n\n    private APIURL:string;\n\n    constructor(private http: HttpClient, private configSvc:ConfigurationService) {         \n        this.APIURL= this.configSvc.configuration.eventApiUrl;\n    }\n\n    public getEvents():Observable<EventData[]>{        \n        console.log(`GET ${this.configSvc.configuration.eventApiUrl}/api/events`);\n        return this.http.get<EventData[]>(`${this.APIURL}/api/events`);\n    }\n\n    public addEvent(event:EventData):Observable<EventData>{\n        console.log(`POST ${this.configSvc.configuration.eventApiUrl}/api/events`);\n        console.log(`Event data:`, event);\n        return this.http.post<EventData>(`${this.APIURL}/api/events`, event,{\n            headers:{\n                \"Content-type\":\"application/json\",\n                \"Accept\":\"application/json\"\n            }\n        } )\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n    private storageSubject=new Subject<string>();\n    \n    \n    public setItem(key:string, value:any){\n        localStorage.setItem(key,value);\n        this.storageSubject.next('added');        \n    }\n    public getItem(key:string){\n        return localStorage.getItem(key);        \n    }\n\n    public removeItem(key:string){\n        localStorage.removeItem(key);\n        this.storageSubject.next('removed');\n    }\n\n    watchStorage(): Observable<any> {\n        return this.storageSubject.asObservable();\n      }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}
=======
{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/add-event/add-event.component.css","webpack:///./src/app/components/add-event/add-event.component.html","webpack:///./src/app/components/add-event/add-event.component.ts","webpack:///./src/app/components/home/home.component.css","webpack:///./src/app/components/home/home.component.html","webpack:///./src/app/components/home/home.component.ts","webpack:///./src/app/components/login/login.component.css","webpack:///./src/app/components/login/login.component.html","webpack:///./src/app/components/login/login.component.ts","webpack:///./src/app/components/not-found/not-found.component.css","webpack:///./src/app/components/not-found/not-found.component.html","webpack:///./src/app/components/not-found/not-found.component.ts","webpack:///./src/app/components/register/register.component.css","webpack:///./src/app/components/register/register.component.html","webpack:///./src/app/components/register/register.component.ts","webpack:///./src/app/interceptors/auth-intercepter.ts","webpack:///./src/app/services/auth.service.ts","webpack:///./src/app/services/configuration.service.ts","webpack:///./src/app/services/event.service.ts","webpack:///./src/app/services/storage.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './components/home/home.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { NotFoundComponent } from './components/not-found/not-found.component';\nimport { AddEventComponent } from './components/add-event/add-event.component';\n\nconst routes: Routes = [\n    { path:\"\", component:HomeComponent},\n    { path:\"events/new\", component:AddEventComponent},\n    { path:\"login\" , component:LoginComponent},    \n    { path:\"register\", component:RegisterComponent},\n    { path:\"**\", component:NotFoundComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<nav class=\\\"navbar navbar-default\\\">\\n    <div class=\\\"container-fluid\\\">\\n        <!-- Brand and toggle get grouped for better mobile display -->\\n        <div class=\\\"navbar-header\\\">\\n            <button type=\\\"button\\\" class=\\\"navbar-toggle collapsed\\\" data-toggle=\\\"collapse\\\"\\n                data-target=\\\"#bs-example-navbar-collapse-1\\\" aria-expanded=\\\"false\\\">\\n                <span class=\\\"sr-only\\\">Toggle navigation</span>\\n                <span class=\\\"icon-bar\\\"></span>\\n                <span class=\\\"icon-bar\\\"></span>\\n                <span class=\\\"icon-bar\\\"></span>\\n            </button>\\n            <a class=\\\"navbar-brand\\\" href=\\\"#\\\">Event Manager</a>\\n        </div>\\n\\n        <!-- Collect the nav links, forms, and other content for toggling -->\\n        <div class=\\\"collapse navbar-collapse\\\" id=\\\"bs-example-navbar-collapse-1\\\">\\n            <ul class=\\\"nav navbar-nav\\\">                \\n                <li><a [routerLink]=\\\"['/']\\\">Events</a></li>   \\n                <li *ngIf=\\\"loggedIn\\\"><a [routerLink]=\\\"['/events/new']\\\">Add Event</a></li>\\n                <li *ngIf=\\\"!loggedIn\\\"><a [routerLink]=\\\"['/login']\\\">Login</a></li>             \\n                <li *ngIf=\\\"!loggedIn\\\"><a [routerLink]=\\\"['/register']\\\">Register</a></li>\\n            </ul>\\n\\n            <ul class=\\\"nav navbar-nav navbar-right\\\">\\n                <li *ngIf=\\\"!loggedIn\\\"><a href=\\\"#\\\">Welcome Guest</a></li>                \\n                <li *ngIf=\\\"loggedIn\\\"><a href=\\\"#\\\">Welcome User</a></li>  \\n                <li *ngIf=\\\"loggedIn\\\"><a href=\\\"#\\\" (click)=\\\"logout()\\\">Logout</a></li>              \\n            </ul>\\n        </div><!-- /.navbar-collapse -->\\n    </div><!-- /.container-fluid -->\\n</nav>\\n\\n<div class=\\\"container-fluid\\\">\\n    <router-outlet></router-outlet>\\n</div>\"","import { Component } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { AuthService } from './services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n    private loggedIn: boolean;\n\n    constructor(private authSvc: AuthService, private router:Router) {\n        this.authSvc.isLoggedIn()\n            .subscribe(res => \n                {                    \n                    this.loggedIn = res;\n                });\n\n    }\n\n    logout(){\n        this.authSvc.logOut();\n        return this.router.navigate(['/'])\n    }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule, APP_INITIALIZER } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { LoginComponent } from './components/login/login.component';\nimport { AuthIntercepter } from './interceptors/auth-intercepter';\nimport { ConfigurationService } from './services/configuration.service';\nimport { RegisterComponent } from './components/register/register.component';\nimport { NotFoundComponent } from './components/not-found/not-found.component';\nimport { AddEventComponent } from './components/add-event/add-event.component';\n\n\nexport function initializeAppConfig(configService: ConfigurationService) {\n    return ():Promise<any> => { \n        return configService.loadSettings();\n    }\n}\n\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        HomeComponent,\n        LoginComponent,\n        RegisterComponent,\n        NotFoundComponent,\n        AddEventComponent\n    ],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        HttpClientModule,\n        ReactiveFormsModule\n    ],\n    providers: [\n        { provide: HTTP_INTERCEPTORS, useClass: AuthIntercepter, multi: true },\n        { provide: APP_INITIALIZER, useFactory: initializeAppConfig, deps: [ConfigurationService], multi: true }\n    ],\n    bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvYWRkLWV2ZW50L2FkZC1ldmVudC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<div class=\\\"row\\\">\\n        <div class=\\\"col-md-6 col-md-offset-3\\\">\\n            <div class=\\\"alert alert-success\\\" *ngIf=\\\"status && status.success\\\">\\n                {{status.message}}\\n            </div>\\n            <div class=\\\"alert alert-danger\\\" *ngIf=\\\"status && status.success===false\\\">\\n                {{status.message}}\\n            </div>\\n            <h3>New event</h3>\\n            <form class=\\\"form\\\" [formGroup]=\\\"form\\\" (submit)=\\\"submit()\\\">\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"title\\\">Title</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"title\\\" />\\n                    <div *ngIf=\\\"controls.title.invalid && (controls.title.dirty || controls.title.touched)\\\" class=\\\"text-danger\\\">\\n                        <div *ngIf=\\\"controls.title.errors.required\\\">Event title is required. </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"location\\\">Event location</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"location\\\" />\\n                    <div *ngIf=\\\"controls.location.invalid && (controls.location.dirty || controls.location.touched)\\\" class=\\\"text-danger\\\">\\n                        <div *ngIf=\\\"controls.location.errors.required\\\">Location of event is required. </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"startDate\\\">Start date</label>\\n                    <input type=\\\"date\\\" class=\\\"form-control\\\" formControlName=\\\"startDate\\\" />\\n                    <div *ngIf=\\\"controls.startDate.invalid && (controls.startDate.dirty || controls.startDate.touched)\\\" class=\\\"text-danger\\\">\\n                        <div *ngIf=\\\"controls.startDate.errors.required\\\">Event start date required. </div>                        \\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"endDate\\\">End date</label>\\n                    <input type=\\\"date\\\" class=\\\"form-control\\\" formControlName=\\\"endDate\\\" />\\n                    <div *ngIf=\\\"controls.endDate.invalid && (controls.endDate.dirty || controls.endDate.touched)\\\" class=\\\"text-danger\\\">\\n                        <div *ngIf=\\\"controls.endDate.errors.required\\\">Event end date is required. </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <label class=\\\"control-label\\\" for=\\\"contactNo\\\">Speaker's name</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"speaker\\\" />\\n                    <div *ngIf=\\\"controls.speaker.invalid && (controls.speaker.dirty || controls.speaker.touched)\\\" class=\\\"text-danger\\\">\\n                        <div *ngIf=\\\"controls.speaker.errors.required\\\">Speaker's name is required. </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                        <label class=\\\"control-label\\\" for=\\\"contactNo\\\">Event registration Url</label>\\n                        <input type=\\\"url\\\" class=\\\"form-control\\\" formControlName=\\\"url\\\" />  \\n                        <div *ngIf=\\\"controls.url.invalid && (controls.url.dirty || controls.url.touched)\\\" class=\\\"text-danger\\\">\\n                                <div *ngIf=\\\"controls.url.errors.required\\\">Event registration url is required. </div>\\n                            </div>                      \\n                    </div>\\n                <div class=\\\"form-group\\\">\\n                    <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn btn-success\\\">Save</button>\\n                </div>\\n            </form>\\n        </div>\\n    </div>\"","import { Component, OnInit } from '@angular/core';\nimport { EventService } from 'src/app/services/event.service';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\n\n@Component({\n    selector: 'add-event',\n    templateUrl: './add-event.component.html',\n    styleUrls: ['./add-event.component.css']\n})\nexport class AddEventComponent implements OnInit {\n\n    private form: FormGroup;\n    private status;any;\n\n    constructor(private fb: FormBuilder,\n        private eventSvc: EventService) { }\n\n    ngOnInit() {\n        this.form = this.fb.group({\n            \"title\": [\"\", Validators.required,],\n            \"location\": [\"\", Validators.required],\n            \"startDate\": [\"\", Validators.required],\n            \"endDate\": [\"\", Validators.required],\n            \"speaker\": [\"\", Validators.required],\n            \"url\": [\"\",Validators.required]\n        })\n    }\n\n    get controls(){ return this.form.controls; }\n    \n    submit() {        \n        if (this.form.valid) {\n            this.eventSvc.addEvent(this.form.value)\n                .subscribe(\n                    result => {\n                        this.status={ success:true, message:\"New event is added successfully.\"}\n                    },\n                    err => {                         \n                        this.status = {\n                            success: false,\n                            message:\"Failed to add new event data.\"\n                        }\n                     }\n                )\n        } else {\n            this.status = {\n                success: false,\n                message:\"Invalid form data\"\n            }\n        }\n    }\n\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvaG9tZS9ob21lLmNvbXBvbmVudC5jc3MifQ== */\"","module.exports = \"\\n<div class=\\\"row\\\">\\n    <div class=\\\"col-md-12\\\">\\n        <table class=\\\"table table-striped table-bordered\\\">\\n            <tr>\\n                <th>Title</th>\\n                <th>Start Date</th>\\n                <th>End Date</th>\\n                <th>Speaker</th>\\n                <th>Location</th>\\n            </tr>\\n            <tr *ngFor=\\\"let ev of events|async\\\">\\n                <td>{{ev.title}}</td>\\n                <td>{{ev.startDate}}</td>\\n                <td>{{ev.endDate}}</td>\\n                <td>{{ev.speaker}}</td>\\n                <td>{{ev.location}}</td>\\n            </tr>\\n        </table>\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { EventService } from 'src/app/services/event.service';\nimport { Observable } from 'rxjs';\nimport { EventData } from 'src/app/models/event-data';\n\n@Component({\n    selector: 'home',\n    templateUrl: './home.component.html',\n    styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n    private events:Observable<EventData[]>;\n\n    constructor(private eventSvc: EventService) { }\n\n    ngOnInit() {\n        this.events=this.eventSvc.getEvents();\n    }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbG9naW4vbG9naW4uY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-md-6 col-md-offset-3\\\">\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"status && status.success===false\\\">\\n            {{status.message}}\\n        </div>\\n        <h3>Login</h3>\\n        <form  [formGroup]=\\\"form\\\" (submit)=\\\"submit()\\\">            \\n            <div class=\\\"form-group\\\">                \\n                <label class=\\\"control-label\\\" for=\\\"email\\\">Email</label>\\n                <input type=\\\"email\\\" name=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" />\\n                <div *ngIf=\\\"controls.email.invalid && (controls.email.dirty || controls.email.touched)\\\" class=\\\"text-danger\\\">\\n                    <div *ngIf=\\\"controls.email.errors.required\\\">Email is required. </div>\\n                    <div *ngIf=\\\"controls.email.errors.email\\\">Invalid email value </div>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\" for=\\\"email\\\">Password</label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" />\\n                <div *ngIf=\\\"controls.password.invalid && (controls.password.dirty || controls.password.touched)\\\" class=\\\"text-danger\\\">\\n                    <div *ngIf=\\\"controls.password.errors.required\\\">Password is required. </div>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"form-group\\\">\\n                <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn btn-success\\\">Login</button>\\n            </div>\\n        </form>\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { StorageService } from 'src/app/services/storage.service';\n\n@Component({\n    selector: 'login',\n    templateUrl: './login.component.html',\n    styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n    private form: FormGroup;\n    private status:any;\n\n    constructor(private fb: FormBuilder,\n        private authSvc: AuthService,\n        private storageSvc:StorageService,\n        private router: Router) { }\n\n    ngOnInit() {\n        this.form = this.fb.group({\n            \"email\": [\"\", Validators.compose([Validators.required, Validators.email])],\n            \"password\":[\"\", Validators.required]\n        });        \n    }\n    get controls() {return this.form.controls}\n\n    submit() {        \n        if (this.form.valid) {\n            this.authSvc.getToken(this.form.value)\n                .subscribe(\n                    result => {                        \n                        this.storageSvc.setItem(\"auth-token\", result);\n                        this.router.navigate([\"/\"]);\n                    },\n                    err => {                         \n                        this.status = {\n                            success: false,\n                            message:\"Login failed, invalid username/password\"\n                        }\n                     }\n                )\n        } else {\n            this.status = {\n                success: false,\n                message:\"Invalid form data\"\n            }\n        }\n    }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvbm90LWZvdW5kL25vdC1mb3VuZC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<h2>Not found</h2>\\n<p>\\n    The page you have reqeusted not found.\\n    <a [routerLink]=\\\"['/']\\\">Click here</a> to go to login.\\n</p>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'not-found',\n  templateUrl: './not-found.component.html',\n  styleUrls: ['./not-found.component.css']\n})\nexport class NotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvcmVnaXN0ZXIvcmVnaXN0ZXIuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<div class=\\\"row\\\">\\n    <div class=\\\"col-md-6 col-md-offset-3\\\">\\n        <div class=\\\"alert alert-success\\\" *ngIf=\\\"status && status.success\\\">\\n            {{status.message}}\\n        </div>\\n        <div class=\\\"alert alert-danger\\\" *ngIf=\\\"status && status.success===false\\\">\\n            {{status.message}}\\n        </div>\\n        <h3>Register</h3>\\n        <form class=\\\"form\\\" [formGroup]=\\\"form\\\" (submit)=\\\"submit()\\\">\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\" for=\\\"firstName\\\">First name</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"firstName\\\" />\\n                <div *ngIf=\\\"controls.firstName.invalid && (controls.firstName.dirty || controls.firstName.touched)\\\" class=\\\"text-danger\\\">\\n                    <div *ngIf=\\\"controls.firstName.errors.required\\\">First name is required. </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\" for=\\\"lastName\\\">Last name</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"lastName\\\" />\\n                <div *ngIf=\\\"controls.lastName.invalid && (controls.lastName.dirty || controls.lastName.touched)\\\" class=\\\"text-danger\\\">\\n                    <div *ngIf=\\\"controls.lastName.errors.required\\\">Last name is required. </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\" for=\\\"email\\\">Email</label>\\n                <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"email\\\" />\\n                <div *ngIf=\\\"controls.email.invalid && (controls.email.dirty || controls.email.touched)\\\" class=\\\"text-danger\\\">\\n                    <div *ngIf=\\\"controls.email.errors.required\\\">Email is required. </div>\\n                    <div *ngIf=\\\"controls.email.errors.email\\\">Invalid email value </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\" for=\\\"email\\\">Password</label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" formControlName=\\\"password\\\" />\\n                <div *ngIf=\\\"controls.password.invalid && (controls.password.dirty || controls.password.touched)\\\" class=\\\"text-danger\\\">\\n                    <div *ngIf=\\\"controls.password.errors.required\\\">Password is required. </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <label class=\\\"control-label\\\" for=\\\"contactNo\\\">Contact No</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"contactNo\\\" />\\n                <div *ngIf=\\\"controls.contactNo.invalid && (controls.contactNo.dirty || controls.contactNo.touched)\\\" class=\\\"text-danger\\\">\\n                    <div *ngIf=\\\"controls.contactNo.errors.required\\\">Contact number is required. </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <button type=\\\"submit\\\" [disabled]=\\\"!form.valid\\\" class=\\\"btn btn-success\\\">Register</button>\\n            </div>\\n        </form>\\n    </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n    selector: 'register',\n    templateUrl: './register.component.html',\n    styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n    private form: FormGroup;\n    private status: any;\n\n    constructor(private fb: FormBuilder,\n        private authSvc: AuthService) { }\n\n    ngOnInit() {\n        this.form = this.fb.group({\n            \"firstName\": [\"\", Validators.required,],\n            \"lastName\": [\"\", Validators.required],\n            \"email\": [\"\", Validators.compose([Validators.required, Validators.email])],\n            \"password\": [\"\", Validators.required],\n            \"contactNo\": [\"\", Validators.required]\n        })\n    }\n\n    get controls() {return this.form.controls}\n    \n    submit() {\n        if (this.form.valid) {\n            this.authSvc.register(this.form.value)\n                .subscribe(\n                    result => {\n                        this.status = { success: true, message: \"You have registered successfully\" };\n                    },\n                    err => {\n                    this.status = {\n                        success: false,\n                        message:\"Registration process failed, some error occured\"\n                    }\n                    }\n                )\n        } else {\n            this.status={ success:false, message:\"Invalid user details.\"};\n        }\n    }\n\n}\n","import { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class AuthIntercepter implements HttpInterceptor {\n\n    intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n        let newReq= req.clone({\n            setHeaders:{\n                \"Content-Type\":\"application/json\",\n                \"Accept\":\"application/json\"\n            }\n        });\n\n        let token = localStorage.getItem(\"auth-token\") || undefined;\n        if (token) {\n            var request = newReq.clone({\n                setHeaders:{\"Authorization\":`Bearer ${token}`},\n                //headers: req.headers.set(\"Authorization\", `Bearer ${token}`)\n            });\n            return next.handle(request);\n        }\n        return next.handle(newReq)\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of, Subject, BehaviorSubject } from 'rxjs';\nimport { ConfigurationService } from './configuration.service';\nimport { StorageService } from './storage.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AuthService {\n\n    private APIURL: string;\n    private loggedIn: boolean = false;\n    private subject: BehaviorSubject<boolean>;\n\n    constructor(private configSvc: ConfigurationService,\n        private http: HttpClient,\n        private storageSvc: StorageService) {\n\n        this.APIURL = this.configSvc.configuration.identityApiUrl;\n        this.subject = new BehaviorSubject<boolean>(this.loggedIn);        \n\n        if (this.storageSvc.getItem('auth-token')){\n            this.loggedIn = true;\n            this.subject.next(this.loggedIn);\n        }\n\n        this.storageSvc.watchStorage()\n            .subscribe(data => {\n                if (data === 'removed')\n                    this.loggedIn = false;\n                else if (data === 'added')\n                    this.loggedIn = true;\n                this.subject.next(this.loggedIn);\n            });\n\n\n    }\n\n    public getToken(login: any): Observable<string> {\n        return this.http.post<string>(`${this.APIURL}/api/identity/token`, login, {\n            headers: {\n                \"Content-type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        });\n    }\n\n    public register(user: any): Observable<any> {\n        return this.http.post<any>(`${this.APIURL}/api/identity/register`, user, {\n            headers: {\n                \"Content-type\": \"application/json\",\n                \"Accept\": \"application/json\"\n            }\n        });\n    }\n\n    public isLoggedIn(): Observable<boolean> {\n        return this.subject;\n        //return of (this.loggedIn);        \n    }\n\n    public logOut() {\n        this.storageSvc.removeItem(\"auth-token\");\n    }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { IConfiguration } from '../models/configuration';\nimport { Subject } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ConfigurationService {\n    configuration: IConfiguration;\n    \n    constructor(private http: HttpClient) { }\n\n    loadSettings(): Promise<any> {\n        const baseURI = document.baseURI.endsWith('/') ? document.baseURI : `${document.baseURI}/`;\n        let url = `${baseURI}api/settings`;\n        return this.http.get<IConfiguration>(url)\n            .toPromise()\n            .then(resp => this.configuration = resp);\n    }\n    \n}","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, empty } from 'rxjs';\nimport { EventData } from '../models/event-data';\nimport { ConfigurationService } from './configuration.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class EventService {\n\n    private APIURL:string;\n\n    constructor(private http: HttpClient, private configSvc:ConfigurationService) { \n        this.APIURL= this.configSvc.configuration.eventApiUrl;\n    }\n\n    public getEvents():Observable<EventData[]>{        \n        return this.http.get<EventData[]>(`${this.APIURL}/api/events`);\n    }\n\n    public addEvent(event:EventData):Observable<EventData>{\n        return this.http.post<EventData>(`${this.APIURL}/api/events`, event,{\n            headers:{\n                \"Content-type\":\"application/json\",\n                \"Accept\":\"application/json\"\n            }\n        } )\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject, Observable } from 'rxjs';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n    private storageSubject=new Subject<string>();\n    \n    \n    public setItem(key:string, value:any){\n        localStorage.setItem(key,value);\n        this.storageSubject.next('added');        \n    }\n    public getItem(key:string){\n        return localStorage.getItem(key);        \n    }\n\n    public removeItem(key:string){\n        localStorage.removeItem(key);\n        this.storageSubject.next('removed');\n    }\n\n    watchStorage(): Observable<any> {\n        return this.storageSubject.asObservable();\n      }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}
>>>>>>> a02995eb2724286f928d6e75a9137507aed8c1d0
